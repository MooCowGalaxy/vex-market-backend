// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int    @id @default(autoincrement())
  cdnId         String @default(uuid())
  email         String @unique @db.VarChar(255)
  passwordHash  String @db.VarChar(255)
  firstName     String @db.VarChar(60)
  lastName      String @db.VarChar(60)
  joinTimestamp Int

  // if verifyToken exists, the user is not verified
  verifyToken String? @unique @db.VarChar(128)

  tokens      Token[]
  resetTokens ResetToken[]
  posts       Post[]
  sellerChats Chat[]       @relation("seller")
  buyerChats  Chat[]       @relation("buyer")
}

model Token {
  id    Int    @id @default(autoincrement())
  token String @unique @db.VarChar(128)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model ResetToken {
  id      Int    @id @default(autoincrement())
  token   String @unique @db.VarChar(128)
  expires Int

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

// model Post {
//   id          Int    @id @default(autoincrement())
//   title       String @db.VarChar(128)
//   description String @db.VarChar(8000)
//   lastUpdated Int
//   price       Float
//   type        String // local | shipping | both
//   lat         Float
//   long        Float
//
//   archived Boolean @default(false)
//
//   author   User @relation(fields: [authorId], references: [id])
//   authorId Int
//
//   images Image[]
//   chats  Chat[]
// }

model Post {
  id       Int    @id @default(autoincrement())
  cdnId    String @default(uuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  chats    Chat[]
}

model Chat {
  id    Int    @id @default(autoincrement())
  cdnId String @default(uuid())

  post   Post? @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  postId Int?

  seller   User @relation("seller", fields: [sellerId], references: [id])
  sellerId Int

  buyer   User @relation("buyer", fields: [buyerId], references: [id])
  buyerId Int

  messages   ChatMessage[]
  lastUpdate Int
}

model ChatMessage {
  id Int @id @default(autoincrement())

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  authorId  Int
  timestamp BigInt
  message   String  @db.VarChar(1000)
  image     String? @db.VarChar(100)
}

model Zip {
  zip       Int    @id
  city      String @db.VarChar(64)
  state     String @db.VarChar(2)
  latitude  Float
  longitude Float
}
